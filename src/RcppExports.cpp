// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cv_spls_cpp
Rcpp::List cv_spls_cpp(arma::mat x, arma::mat y, int fold, Rcpp::NumericVector eta, Rcpp::IntegerVector K, double kappa, std::string select, bool scale_x, bool scale_y, double eps, int maxstep, bool trace);
RcppExport SEXP _GeneSPLS_cv_spls_cpp(SEXP xSEXP, SEXP ySEXP, SEXP foldSEXP, SEXP etaSEXP, SEXP KSEXP, SEXP kappaSEXP, SEXP selectSEXP, SEXP scale_xSEXP, SEXP scale_ySEXP, SEXP epsSEXP, SEXP maxstepSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type fold(foldSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< std::string >::type select(selectSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_x(scale_xSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_y(scale_ySEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(cv_spls_cpp(x, y, fold, eta, K, kappa, select, scale_x, scale_y, eps, maxstep, trace));
    return rcpp_result_gen;
END_RCPP
}
// spls_cpp
Rcpp::List spls_cpp(arma::mat x, arma::mat y, int K, double eta, double kappa, std::string select, std::string fit, bool scale_x, bool scale_y, double eps, int maxstep, bool trace);
RcppExport SEXP _GeneSPLS_spls_cpp(SEXP xSEXP, SEXP ySEXP, SEXP KSEXP, SEXP etaSEXP, SEXP kappaSEXP, SEXP selectSEXP, SEXP fitSEXP, SEXP scale_xSEXP, SEXP scale_ySEXP, SEXP epsSEXP, SEXP maxstepSEXP, SEXP traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type x(xSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type eta(etaSEXP);
    Rcpp::traits::input_parameter< double >::type kappa(kappaSEXP);
    Rcpp::traits::input_parameter< std::string >::type select(selectSEXP);
    Rcpp::traits::input_parameter< std::string >::type fit(fitSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_x(scale_xSEXP);
    Rcpp::traits::input_parameter< bool >::type scale_y(scale_ySEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type maxstep(maxstepSEXP);
    Rcpp::traits::input_parameter< bool >::type trace(traceSEXP);
    rcpp_result_gen = Rcpp::wrap(spls_cpp(x, y, K, eta, kappa, select, fit, scale_x, scale_y, eps, maxstep, trace));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_GeneSPLS_cv_spls_cpp", (DL_FUNC) &_GeneSPLS_cv_spls_cpp, 12},
    {"_GeneSPLS_spls_cpp", (DL_FUNC) &_GeneSPLS_spls_cpp, 12},
    {NULL, NULL, 0}
};

RcppExport void R_init_GeneSPLS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
